{"version":3,"file":"index-xNTt-6NE.js","sources":["../../src/Screens/Cards2/index.tsx"],"sourcesContent":["import React from 'react';\r\nimport { SharedElement } from '@react-motion-router/core';\r\nimport { Anchor, ScreenComponentProps } from '@react-motion-router/stack';\r\nimport Card from '@mui/material/Card';\r\nimport CardContent from '@mui/material/CardContent';\r\nimport CardMedia from '@mui/material/CardMedia';\r\nimport Typography from '@mui/material/Typography';\r\nimport { Hero, Heroes } from '../../assets/Heroes';\r\nimport ButtonBase from '@mui/material/ButtonBase';\r\nimport './index.css';\r\nimport { getInset } from '../../common/utils';\r\n\r\ninterface CardsProps extends ScreenComponentProps { }\r\n\r\ninterface CardListProps extends CardsProps {\r\n    observer: IntersectionObserver;\r\n}\r\n\r\ninterface CardProps extends CardsProps {\r\n    observer: IntersectionObserver;\r\n    hero: Hero;\r\n}\r\n\r\nlet imageInset = '';\r\nlet textInset = '';\r\nlet heroName = '';\r\nlet titleInset = '';\r\nlet bgInset = '';\r\nconst CardComponent = ({ observer, navigation, hero }: CardProps) => {\r\n    const bgRef = React.useRef<HTMLDivElement | null>(null);\r\n    const titleRef = React.useRef<HTMLHeadingElement | null>(null);\r\n    const paraRef = React.useRef<HTMLParagraphElement | null>(null);\r\n    const imageRef = React.useRef<HTMLImageElement | null>(null);\r\n    const gradientRef = React.useRef<HTMLDivElement | null>(null);\r\n    const params = {\r\n        ...hero,\r\n        photoAspect: 0\r\n    };\r\n    const onClick = () => {\r\n        const image = imageRef.current;\r\n        const paragraph = paraRef.current;\r\n        const title = titleRef.current;\r\n        const bg = bgRef.current;\r\n        const gradient = gradientRef.current;\r\n        if (image && paragraph && title && gradient && bg) {\r\n            const imageRect = image.getBoundingClientRect();\r\n            const paraRect = paragraph.getBoundingClientRect();\r\n            const titleRect = title.getBoundingClientRect();\r\n            params.photoAspect = image.naturalWidth / image.naturalHeight;\r\n            titleInset = getInset(-titleRect.top, -titleRect.right, -titleRect.bottom, -titleRect.left);\r\n            title.style.clipPath = titleInset;\r\n            imageInset = getInset(-imageRect.top, -imageRect.right, -imageRect.bottom, -imageRect.left);\r\n            image.style.clipPath = imageInset;\r\n            gradient.style.clipPath = imageInset;\r\n            bgInset = getInset(-imageRect.top, -imageRect.right, -imageRect.bottom, -imageRect.left);\r\n            bg.style.clipPath = bgInset;\r\n            textInset = getInset(-paraRect.top, -paraRect.right, -paraRect.bottom, -paraRect.left);\r\n            paragraph.style.clipPath = textInset;\r\n            heroName = hero.id;\r\n        }\r\n    };\r\n    return (\r\n        <li role=\"menuitem\">\r\n            <Anchor href='details' query={params} onClick={onClick}>\r\n                <ButtonBase aria-label={`Character profile: ${hero.name}`} disableRipple>\r\n                    <SharedElement id={`${hero.id}-card-bg`} config={{deepClone: false}}>\r\n                        <div\r\n                            id={`${hero.id}-card-bg`}\r\n                            className=\"card-bg\"\r\n                            ref={bgRef}\r\n                            style={{ width: 345 > window.screen.width ? 300 : 345, clipPath: (heroName === hero.id ? bgInset : '') }}\r\n                        >\r\n                            <Card sx={{ width: 345 > window.screen.width ? 300 : 345 }}>\r\n                                <SharedElement id={`${hero.id}-gradient-overlay`}>\r\n                                    <div\r\n                                        ref={gradientRef}\r\n                                        className=\"gradient-overlay\"\r\n                                        style={{\r\n                                            clipPath: (heroName === hero.id ? imageInset : '')\r\n                                        }}\r\n                                    ></div>\r\n                                </SharedElement>\r\n                                <SharedElement id={hero.id}>\r\n                                    <CardMedia\r\n                                        component=\"img\"\r\n                                        height={345}\r\n                                        loading={heroName === hero.id ? \"eager\" : \"lazy\"}\r\n                                        decoding={heroName === hero.id ? \"sync\" : \"async\"}\r\n                                        src={hero.photoUrl}\r\n                                        alt={hero.name}\r\n                                        id={`${hero.id}`}\r\n                                        ref={imageRef}\r\n                                        style={{\r\n                                            clipPath: (heroName === hero.id ? imageInset : '')\r\n                                        }}\r\n                                    />\r\n                                </SharedElement>\r\n                                <CardContent style={{ position: 'absolute', bottom: '0' }}>\r\n                                    <SharedElement id={`title-${hero.id}`} config={{\r\n                                        type: 'fade-through'\r\n                                    }}>\r\n                                        <Typography\r\n                                            style={{\r\n                                                clipPath: (heroName === hero.id ? titleInset : ''),\r\n                                                fontWeight: 'bold',\r\n                                                zIndex: 10,\r\n                                                margin: 0,\r\n                                                color: 'white',\r\n                                                position: 'relative',\r\n                                                fontSize: '28px'\r\n                                            }}\r\n                                            ref={titleRef}\r\n                                            gutterBottom\r\n                                            variant=\"h4\"\r\n                                            component=\"h4\"\r\n                                        >{hero.name}</Typography>\r\n                                    </SharedElement>\r\n                                    <SharedElement id={`description-${hero.id}`} config={{\r\n                                        type: 'fade-through'\r\n                                    }}>\r\n                                        <p\r\n                                            ref={paraRef}\r\n                                            style={{\r\n                                                fontSize: '16px',\r\n                                                zIndex: 10,\r\n                                                color: 'white',\r\n                                                position: 'relative',\r\n                                                clipPath: (heroName === hero.id ? textInset : '')\r\n                                            }}\r\n                                        >{hero.description}</p>\r\n                                    </SharedElement>\r\n                                </CardContent>\r\n                            </Card>\r\n                        </div>\r\n                    </SharedElement>\r\n                </ButtonBase>\r\n            </Anchor>\r\n        </li>\r\n    );\r\n}\r\n\r\nconst CardList = (props: CardListProps) => {\r\n    const cards = Heroes.map((hero: Hero, index) => {\r\n        return <CardComponent key={index} hero={hero} {...props} />\r\n    });\r\n\r\n    return <>{cards}</>;\r\n}\r\n\r\nexport default class Cards2 extends React.Component<CardsProps> {\r\n    static isFirstLoad = false;\r\n    private ref: HTMLElement | null = null;\r\n    private observer = new IntersectionObserver(this.observe.bind(this), {\r\n        root: document.querySelector('.card-list')\r\n    });\r\n    private static scrollPos = {\r\n        x: 0,\r\n        y: 0\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.props.navigation.preloadRoute('details');\r\n        this.props.navigation.transition?.finished.then(() => {\r\n            if (!Cards2.isFirstLoad) {\r\n                Cards2.isFirstLoad = true;\r\n                this.forceUpdate();\r\n            }\r\n            if (this.props.navigation.current.url?.pathname === '/cards-2') {\r\n                imageInset = '';\r\n                textInset = '';\r\n                titleInset = '';\r\n                this.forceUpdate();\r\n            }\r\n        });\r\n        if (this.ref) {\r\n            this.ref.scrollTo(Cards2.scrollPos.x, Cards2.scrollPos.y); // scroll restoration\r\n        }\r\n    }\r\n\r\n    shouldComponentUpdate() {\r\n        return false;\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        this.observer.disconnect();\r\n        if (this.ref) {\r\n            Cards2.scrollPos = {\r\n                x: this.ref.scrollLeft,\r\n                y: this.ref.scrollTop\r\n            }\r\n        }\r\n    }\r\n\r\n    observe(entries: IntersectionObserverEntry[]) {\r\n        for (let entry of entries) {\r\n            const target = entry.target as HTMLImageElement;\r\n            if (entry.isIntersecting) {\r\n                target.loading = 'eager';\r\n                target.decoding = 'sync';\r\n            } else {\r\n                target.loading = 'lazy';\r\n                target.decoding = 'async';\r\n            }\r\n        }\r\n    }\r\n    render() {\r\n        return (\r\n            <div className={`cards cards-2 ${Cards2.isFirstLoad ? 'loaded' : 'suspense'}`}>\r\n                <ul role=\"group\" aria-label='One Punch Man Series Characters' className=\"card-list\" ref={(ref: HTMLElement | null) => this.ref = ref}>\r\n                    <CardList {...this.props} observer={this.observer} />\r\n                </ul>\r\n            </div>\r\n        );\r\n    }\r\n}"],"names":["imageInset","textInset","heroName","titleInset","bgInset","CardComponent","observer","navigation","hero","bgRef","React","titleRef","paraRef","imageRef","gradientRef","params","onClick","image","paragraph","title","bg","gradient","imageRect","paraRect","titleRect","getInset","jsx","Anchor","ButtonBase","SharedElement","jsxs","Card","CardMedia","CardContent","Typography","CardList","props","cards","Heroes","index","Cards2","entries","entry","target","ref"],"mappings":"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"}